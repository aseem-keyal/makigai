#!/bin/sh

# TODO: portability to GNU systems (date command, bashisms) 
# TODO: remove dependency on bc if possible 
# TODO: add ability to add cards (add flag -c that takes in a front-back-tags tsv and generates id-rep-easy-interval-date to stdout, this can then be chained with stdin read)
# TODO: add study by tag feature 
# TODO: ability to read from stdin (so db.tsv can be sliced and diced in a particular way and then used as the deck, i.e. custom study sessions in anki)
# TODO: stats (number of cards by tag, forecast, reviews per day, other anki features)
# TODO: add comments to code
# TODO: colorful output https://superuser.com/questions/1368162/how-to-display-colour-text-in-terminal
# TODO: explain grading system in help
# TODO: look to anki's features for inspiration
# TODO: tweak spaced repitition algorithm

SEPARATOR="----------------------------------------------------"
echo $'sheru v0.0.1\npress \'h\' for help\n'
awk -F\t -v date="$(date +%Y-%m-%d)" '
	BEGIN {
		due=0; 
		pastdue=0;
	} 

	$8 == date {
		due++;
		print $0 > "to_study.tsv";
	} 

	$8 < date {
		pastdue++;
		print $0 > "to_study.tsv";
	} 

	END {
		OFS="";
		if (due > 0 || pastdue > 0) {
			printf "Due: %s card(s)",due;
			if (pastdue > 0) printf " (%s past due)",pastdue;
			printf "\n";
		}
		else
			print "All caught up!"
	}' db.tsv

SM2() {
	case $1 in 
		0|1|2 )	
			# TODO: break out into a function
			REPETITION=0
			INTERVAL=1;;
		3|4|5 )
			# TODO: collapse this into if-elseif-else statement
			# TODO: break it out into a function
			if [ $REPETITION = 0 ]
			then
				INTERVAL=1 
			fi

			if [ $REPETITION = 1 ]
			then
				INTERVAL=6 
			fi

			if [ $REPETITION -gt 1 ]
			then
				INTERVAL=$(echo "(($INTERVAL*$EASINESS) + (1-($INTERVAL*$EASINESS)%1)*(($INTERVAL*$EASINESS)/1 > 1))/1" | bc) 
			fi

			EASINESS=$(echo "$EASINESS + (0.1 - (5 - $GRADE) * (0.08 + (5 - $GRADE) * 0.02))" | bc)
			if [ $(echo "$EASINESS < 1.3" | bc) = 1 ]
			then
				EASINESS=1.3
			fi
			REPETITION=$(echo "$REPETITION+1" | bc);;
			
	esac
}

review() {
	while IFS=$'\t' read -r -u 3 ID FRONT BACK TAGS REPETITION EASINESS INTERVAL DATE; do
		OLD_LINE="$ID	$FRONT	$BACK	$TAGS	$REPETITION	$EASINESS	$INTERVAL	$DATE"
		echo $SEPARATOR
		echo "Front: " $FRONT
		read -n 1 -s -r -p $'Press any key to show back...\n'
		echo "Back: " $BACK
		# TODO: include interval next to each grade
		while !(echo "$GRADE" | grep -q "^[0-5]$"); do 
			read -n 1 -s -r -p $'[0] [1] [2] [3] [4] [5]\n' GRADE
		done

		echo "Grade: " $GRADE
		SM2 $GRADE
		unset GRADE

		DATE=$(date -v +$INTERVAL"d" +%Y-%m-%d)
		echo "Repitition: " $REPETITION "Easiness: " $EASINESS "Interval: " $INTERVAL "Date: " $DATE
		NEW_LINE="$ID	$FRONT	$BACK	$TAGS	$REPETITION	$EASINESS	$INTERVAL	$DATE"
		sed -i.bu "s/$OLD_LINE/$NEW_LINE/g" db.tsv
		rm db.tsv.bu
	done 3< to_study.tsv
	echo $SEPARATOR
	echo "Done with review!"
}

while true; do
	read -p "> " PROMPT_INPUT

	case $PROMPT_INPUT in
		r|review )
			echo "Let's review!"; review; rm to_study.tsv 2> /dev/null;;
		h|help )
			echo $'press \'r\' to review\npress \'h\' for help\npress \'q\' to quit\n';;
		q|quit )
			echo "Quiting..."; break;;
		* )
			echo "What??";;
	esac
done
